/* Generate N bytes of random output.  */

/* When generating output this program uses the x86-64 RDRAND
   instruction if available to generate random numbers, falling back
   on /dev/urandom and stdio otherwise.

   This program is not portable.  Compile it with gcc -mrdrnd for a
   x86-64 machine.

   Copyright 2015 Paul Eggert

   This program is free software: you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */


#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>
#include "randcpuid.h"
/* Main program, which outputs N bytes of random data.  */
int
main (int argc, char **argv)
{
  /* Check arguments.  */
  bool valid = false;
  long long nbytes;
  if (argc == 2)
    {
      char *endptr;
      errno = 0;
      nbytes = strtoll (argv[1], &endptr, 10);
      if (errno)
	perror (argv[1]);
      else
	valid = !*endptr && 0 <= nbytes;
    }
  if (!valid)
    {
      fprintf (stderr, "%s: usage: %s NBYTES\n", argv[0], argv[0]);
      return 1;
    }

  /* If there's no work to do, don't worry about which library to use.  */
  if (nbytes == 0)
    return 0;

  /* Now that we know we have work to do, arrange to use the
     appropriate library.  */
  /*replace the intiialize and finalize with dynamic linking*/
  /* 
 void (*initialize) (void);
  void (*finalize) (void);
  */
   unsigned long long (*rand64) (void);
   void* myfile;
   int mode = RTLD_NOW;
   char char1[] = "./randlibhw.so";
   char char1_1[] = "hardware_rand64";
   char char2[] = "./randlibsw.so";
   char char2_1[] = "software_rand64";
  if (rdrand_supported())
    {
      myfile = dlopen(char1, mode); 
      if (myfile == NULL)
	{
	  fprintf(stderr, "error opening randlibhw.so\n");
	  exit(1);
	}
      rand64 = dlsym(myfile, char1_1);
      if (dlerror())
	{
	  fprintf(stderr, "error loading randlibhw.so\n");
	  exit(1);
	}
      printf("HW\n");
      /*
      initialize = hardware_rand64_init;
      rand64 = hardware_rand64;
      finalize = hardware_rand64_fini;
      */
      }
  else
    {
      myfile = dlopen(char2,  mode);
      if (myfile == NULL)
	{
	  fprintf(stderr, "error opening randlibsw.so\n");
	  exit(1);
	}
      rand64 = dlsym(myfile, char2_1);
      if (dlerror())
	{
	  fprintf(stderr, "error loading randlibsw.so\n");
	  exit(1);
	}
      printf("SW\n");
      /*
      initialize = software_rand64_init;
      rand64 = software_rand64;
      finalize = software_rand64_fini;
      */
      }

  //initialize ();
  int wordsize = sizeof rand64();
  int output_errno = 0;
  
  do
    {
      unsigned long long x = rand64();  
      size_t outbytes = nbytes < wordsize ? nbytes : wordsize;
      char* charr = (char*)malloc((sizeof(char)*outbytes));
      sprintf (charr, "%llu" , x);
      printf("%s\n", charr);
      /*
      int check = fwrite (charr, 1 , outbytes, stdout);
      printf("check %d\n",check);
      printf("outbytes %d\n", outbytes);
      if (check != outbytes)
	{
	  output_errno = errno;
	  break;
	}
      */
      nbytes -= outbytes;
        free(charr);
    }
  while (0 < nbytes);

  if (fclose (stdout) != 0)
    output_errno = errno;

  if (output_errno)
    {
      errno = output_errno;
      perror ("output");
      dlclose(myfile);
      //  finalize ();
      return 1;
    }
  dlclose(myfile);
  //finalize ();
  return 0;
}
